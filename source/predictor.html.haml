
%h1 Presidential Victory Predictor
%h2 Methodology
%p Using our patented multi-layered perceptronics&trade;, we analyse the latest polls, Twitter sentiment and media patterns to accurately determine the likely victor of the presidential election.
%h2 Current Prediction
%p
  %span.hide-me Calculating...
  %span.hide-me#randomiser
  .hidden#clinton
    .text
      Crooked Clinton has a
      %span#clinton-result
      \%
      chance of becoming the next President
    = image_tag 'clinton-winning.jpg', alt: 'Clinton is ahead!'
  .hidden#trump
    .text
      Donald J. Trump has a
      %span#trump-result
      \%
      chance of becoming the next President
    = image_tag 'trump-thoughtful.jpg', alt: 'It\'s Trump Time!'
  .hidden#draw
    .text
      It's neck and neck!
    = image_tag 'miley.jpg', alt: 'No result!'
:coffee
  sleep = (ms) ->
    start = new Date().getTime()
    continue while new Date().getTime() - start < ms
  (($) ->
    $.fn.extend numAnim: (options) ->
      if !@length
        return false
      @defaults =
        endAt: 2560
        numClass: 'autogen-num'
        duration: 5
        interval: 90
      settings = $.extend({}, @defaults, options)
      $num = $('<span/>', 'class': settings.numClass)
      @each ->
        $this = $(this)
        # Wrap each number in a tag.
        frag = document.createDocumentFragment()
        numLen = settings.endAt.toString().length
        x = 0
        while x < numLen
          rand_num = Math.floor(Math.random() * 10)
          frag.appendChild $num.clone().text(rand_num)[0]
          x++
        $this.empty().append frag

        get_next_num = (num) ->
          ++num
          if num > 9
            return 0
          num

        # Iterate each number.
        $this.find('.' + settings.numClass).each ->
          `var $num`
          $num = $(this)
          num = parseInt($num.text())
          interval = setInterval((->
            num = get_next_num(num)
            $num.text num
            return
          ), settings.interval)
          setTimeout (->
            clearInterval interval
            return
          ), settings.duration * 1000 - (settings.interval)
          return
        setTimeout (->
          $this.text settings.endAt.toString()
          return
        ), settings.duration * 1000
        return
    return
  ) jQuery

  $ ->
    -# grab ze data
    predictor_url = 'https://9cv3znejwa.execute-api.ap-southeast-2.amazonaws.com/prod'
    $.getJSON(predictor_url).done (data) ->
      if data.trump_chance < 50
        -# ILLARY!
        $("#randomiser, #clinton-result").numAnim({
          endAt: (100 - data.trump_chance),
          duration: 3
        })
        setTimeout (->
          $("#clinton").removeClass('hidden')
          return
        ), 4000
      else if data.trump_chance > 50
        -# TRUMP!
        $("#randomiser, #trump-result").numAnim({
          endAt: (data.trump_chance),
          duration: 3
        })
        setTimeout (->
          $("#trump").removeClass('hidden')
          return
        ), 4000
      else
        -# TRUMP!
        $("#randomiser").numAnim({
          endAt: (data.trump_chance),
          duration: 3
        })
        setTimeout (->
          $("#draw").removeClass('hidden')
          return
        ), 4000
      setTimeout (->
        $(".hide-me").addClass('hidden')
        return
      ), 4000
